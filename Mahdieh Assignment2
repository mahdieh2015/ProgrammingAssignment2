## A pair of functions that cache the inverse of a matrix

## Creates a special matrix object that can cache its inverse
makeCacheMatrix <- function( m = matrix() ) {
    
    ## Initialize the inverse property
    i <- NULL
    
    ## Method to set the matrix
    setmatrix <- function( matrix ) {
        m <<- matrix
        i <<- NULL
    }
    
    ## Method the get the matrix
    getmatrix <- function() {
        ## Return the matrix
        m
    }
    
    ## Method to set the inverse of the matrix
    setInversem <- function(inverse) {
        i <<- inverse
    }
    
    ## Method to get the inverse of the matrix
    getInversem <- function() {
        ## Return the inverse property
        i
    }
    
    ## Return a list of the methods
    list(setmatrix = setmatrix, getmatrix = getmatrix,
         setInversem = setInversem,
         getInversem = getInversem)
}


## Compute the inverse of the special matrix returned by "makeCacheMatrix" mentioned
## above. If the inverse has already been calculated (and the matrix has not
## changed), then the "cachesolve" should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
    
    ## Return a matrix that is the inverse of 'x'
    m <- x$getInversem()
    
    ## Just return the inverse if its already set
    if( !is.null(m) ) {
        message("getting cached data")
        return(m)
    }
    
    ## Get the matrix from our object
    data <- x$getmatrix()
    
    ## Calculate the inverse using matrix multiplication
    m <- solve(data) %*% data
    
    ## Set the inverse to the object
    x$setInversem(m)
    
    ## Return the matrix
    m
}
